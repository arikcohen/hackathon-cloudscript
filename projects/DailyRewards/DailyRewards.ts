
// This is a Cloud Script function. "args" is set to the value of the "FunctionParameter" 
// parameter of the ExecuteCloudScript API.
// (https://api.playfab.com/Documentation/Client/method/ExecuteCloudScript)
// "context" contains additional information when the Cloud Script function is called from a PlayStream action.
var DailyRewardsHelloWorld = function (args: any, context: IPlayFabContext): IDailyRewardsHelloWorldResponse {

    // The pre-defined "currentPlayerId" variable is initialized to the PlayFab ID of the player logged-in on the game client. 
    // Cloud Script handles authenticating the player automatically.
    var message = "Hello " + currentPlayerId + "!";

    // You can use the "log" object to write out debugging statements. It has
    // three functions corresponding to logging level: debug, info, and error. These functions
    // take a message string and an optional object.
    log.info(message);
    var inputValue = null;
    if (args && args.inputValue)
        inputValue = args.inputValue;
    log.debug("helloWorld:", { input: args.inputValue });

    // The value you return from a Cloud Script function is passed back 
    // to the game client in the ExecuteCloudScript API response, along with any log statements
    // and additional diagnostic information, such as any errors returned by API calls or external HTTP
    // requests. They are also included in the optional player_executed_cloudscript PlayStream event 
    // generated by the function execution.
    // (https://api.playfab.com/playstream/docs/PlayStreamEventModels/player/player_executed_cloudscript)
    return { messageValue: message };
}
interface IDailyRewardsHelloWorldResponse {
    messageValue: string;
}
handlers["DailyRewardsHelloWorld"] = DailyRewardsHelloWorld;


// This function will control the game's reward heartbeat and is called by a scheduled task
var DailyRewardUpdateLastRewardHeartbeat = function (args: any, context: IPlayFabContext): IDailyRewardUpdateLastRewardHeartbeat {

    var message = "Executing the DailyReward heartbeat - all players will now be able to claim their next reward ";
    log.info(message);

    var headers = {};
    var body = {};
    var url = "http://worldclockapi.com/api/json/utc/now";
    var content = JSON.stringify(body);
    var httpMethod = "get";
    var contentType = "application/json";

    // The pre-defined http object makes synchronous HTTP requests
    var timeResponse = JSON.parse(http.request(url, httpMethod, content, contentType, headers));
    var currentDateTime = new Date(timeResponse.currentDateTime);
    log.debug(currentDateTime.toDateString());
    // Update the title data value to contain current datetime
    server.SetTitleInternalData(
        {
            "Key": "DailyRewardLastRewardHeartbeat",
            "Value": JSON.stringify(currentDateTime.getTime())
        });
    return { messageValue: message };
}
interface IDailyRewardUpdateLastRewardHeartbeat {
    messageValue: string;
}
handlers["DailyRewardUpdateLastRewardHeartbeat"] = DailyRewardUpdateLastRewardHeartbeat;

// This function checks to see how much longer a player must wait to claim theiir next reward
var DailyRewardsCheckRewardAvailability = function (args: any, context: IPlayFabContext): IDailyRewardsCheckRewardAvailability {

    var message = "Checking whether " + currentPlayerId + " can claim a reward";
    log.info(message);

    var headers = {};
    var body = {};
    var url = "http://worldclockapi.com/api/json/utc/now";
    var content = JSON.stringify(body);
    var httpMethod = "get";
    var contentType = "application/json";

    // The pre-defined http object makes synchronous HTTP requests
    var timeResponse = JSON.parse(http.request(url, httpMethod, content, contentType, headers));
    var currentDateTime = new Date(timeResponse.currentDateTime);
    log.info("Player " + currentPlayerId + " is checking at time " + currentDateTime.toTimeString());

    var internalData = server.GetTitleInternalData({}).Data;
    var lastRewardHeartbeat = new Date(internalData.DailyRewardLastRewardHeartbeat);
    if (currentDateTime.getUTCSeconds() > lastRewardHeartbeat.getUTCSeconds())
        log.debug("Player time was greater than title time" + currentDateTime.getTime() + ">" + lastRewardHeartbeat.getTime());
    else
        log.debug("Player time was less than title time" + currentDateTime.getUTCSeconds() + "<" + lastRewardHeartbeat.getUTCSeconds());

    message = "Player time " + currentDateTime.getTime() + " vs lastTitleHeartbeat " + lastRewardHeartbeat.getTime();
    return { messageValue: message };
}
interface IDailyRewardsCheckRewardAvailability {
    messageValue: string;
}
handlers["DailyRewardsCheckRewardAvailability"] = DailyRewardsCheckRewardAvailability;